--- a/inngest/workflows.ts
+++ b/inngest/workflows.ts
@@ -229,123 +229,102 @@
     const processorName = `projects/${projectId}/locations/${location}/processors/${processorId}`;
 
-  const [processResponse] = await step.run("documentai-process", async () => {
-  // send raw bytes directly to the client (avoid passing base64 string)
-  // DocumentProcessorServiceClient accepts bytes for rawDocument.content
-  const [response] = await client.processDocument({
-    name: processorName,
-    rawDocument: {
-      // pass Buffer directly (avoids serialization issues)
-      content: fileBuffer,
-      mimeType: mime || "application/octet-stream",
-    },
-  });
-  return response;
-});
-
-
-    const document = processResponse?.document ?? {};
-    const pages = Array.isArray(document.pages) ? document.pages : [];
-
-    let words = 0;
-    let totalConfidence = 0;
-    let confidenceCount = 0;
-    const languages: Record<string, number> = {};
-
-    function recordLanguage(code?: string | null, confidence?: number | null) {
-      if (!code) return;
-      const score = confidence ?? 0;
-      const current = languages[code] ?? 0;
-      if (score > current) languages[code] = score;
-    }
-
-    if (Array.isArray(document.languages)) {
-      for (const lang of document.languages) {
-        recordLanguage(lang?.languageCode, lang?.confidence);
-      }
-    }
-
-    for (const page of pages) {
-      if (Array.isArray(page?.tokens)) {
-        words += page.tokens.length;
-      }
-      const pageConfidence =
-        typeof page?.layout?.confidence === "number"
-          ? page.layout.confidence
-          : typeof page?.confidence === "number"
-          ? page.confidence
-          : null;
-      if (pageConfidence !== null) {
-        totalConfidence += pageConfidence;
-        confidenceCount += 1;
-      }
-      const detectedPageLanguages =
-        Array.isArray(page?.detectedLanguages)
-          ? page.detectedLanguages
-          : Array.isArray(page?.layout?.detectedLanguages)
-            ? page.layout.detectedLanguages
-            : [];
-      for (const lang of detectedPageLanguages) {
-        recordLanguage(lang?.languageCode, lang?.confidence);
-      }
-    }
-
-    const pageCount = pages.length;
-    const avgConfidence =
-      confidenceCount > 0 ? totalConfidence / confidenceCount : null;
-    const normalizedConfidence = avgConfidence ?? 0;
-
-    const primaryLanguage = Object.entries(languages)
-      .sort((a, b) => b[1] - a[1])
-      .map((x) => x[0])[0];
-
-    return {
-      ok: true,
-      page_count: pageCount,
-      words,
-      avg_confidence: normalizedConfidence,
-    };
+  const [processResponse] = await step.run("documentai-process", async () => {
+    // send raw bytes directly to the client (avoid passing base64 string)
+    // DocumentProcessorServiceClient accepts bytes for rawDocument.content
+    const [response] = await client.processDocument({
+      name: processorName,
+      rawDocument: {
+        // pass Buffer directly (avoids serialization issues)
+        content: fileBuffer,
+        mimeType: mime || "application/octet-stream",
+      },
+    });
+    return response;
+  });
+
+  const document = processResponse?.document ?? {};
+  const pages = Array.isArray(document.pages) ? document.pages : [];
+
+  let words = 0;
+  let totalConfidence = 0;
+  let confidenceCount = 0;
+  const languages: Record<string, number> = {};
+
+  function recordLanguage(code?: string | null, confidence?: number | null) {
+    if (!code) return;
+    const score = confidence ?? 0;
+    const current = languages[code] ?? 0;
+    if (score > current) languages[code] = score;
+  }
+
+  if (Array.isArray(document.languages)) {
+    for (const lang of document.languages) {
+      recordLanguage(lang?.languageCode, lang?.confidence);
+    }
+  }
+
+  for (const page of pages) {
+    if (Array.isArray(page?.tokens)) {
+      words += page.tokens.length;
+    }
+    const pageConfidence =
+      typeof page?.layout?.confidence === "number"
+        ? page.layout.confidence
+        : typeof page?.confidence === "number"
+        ? page.confidence
+        : null;
+    if (pageConfidence !== null) {
+      totalConfidence += pageConfidence;
+      confidenceCount += 1;
+    }
+    const detectedPageLanguages =
+      Array.isArray(page?.detectedLanguages)
+        ? page.detectedLanguages
+        : Array.isArray(page?.layout?.detectedLanguages)
+        ? page.layout.detectedLanguages
+        : [];
+    for (const lang of detectedPageLanguages) {
+      recordLanguage(lang?.languageCode, lang?.confidence);
+    }
+  }
+
+  const pageCount = pages.length;
+  const avgConfidence = confidenceCount > 0 ? totalConfidence / confidenceCount : null;
+  const normalizedConfidence = avgConfidence ?? 0;
+
+  // Persist the potentially large document object and return a small reference
+  let documentReference;
+  try {
+    documentReference = await safeReturnAndPersistMaybe(document, {
+      quote_id: typeof quote_id === "number" ? quote_id : undefined,
+      file_id: typeof file_id === "string" ? file_id : undefined,
+      label: "documentai-document",
+    });
+  } catch (err) {
+    // If persistence throws, capture the error as a reference with upload_error
+    documentReference = {
+      stored_at: null,
+      bytes: Buffer.byteLength(JSON.stringify(document || {}), "utf8"),
+      preview: JSON.stringify(document || {}).slice(0, 2000),
+      truncated: true,
+      upload_error: err instanceof Error ? err.message : String(err),
+    };
+  }
+
+  // Log persistence outcome for debugging
+  logger?.info("ocr-document persisted document reference", {
+    stored_at: documentReference?.stored_at ?? null,
+    bytes: documentReference?.bytes ?? null,
+    upload_error: documentReference?.upload_error ?? null,
+  });
+
+  return {
+    ok: true,
+    page_count: pageCount,
+    words,
+    avg_confidence: normalizedConfidence,
+    document_ref: documentReference,
+  };
